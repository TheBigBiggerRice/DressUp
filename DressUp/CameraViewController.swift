//
//  TagsPageViewController.swift
//  DressUp
//
//  Created by Chenyang Zhang on 7/14/17.
//  Copyright Â© 2017 Chenyang Zhang. All rights reserved.
//
import UIKit
import Clarifai
import SCLAlertView
import AVFoundation
import Photos

final class CameraViewController: DUViewController {
  
  var apparelTags = [String]()
  var colorTags = [String]()
  
  var apparelButtons = [UIButton]()
  var colorButtons = [UIButton]()
  
  var occasionButtonIsSelected = false
  
  //for category labels
  var categoryButtonIndex = 0
  
  var occasionButtonText = ["Romantic", "Casual", "Night Out", "Sports", "School", "Work", "Business", "Formal"]
  
  var occasionButtons = [UIButton]()
  
  var occasionTags = [String]()
  
  var autoGeneratedApparelTags = [String]()
  
  var autoGeneratedColorTags = [String]()
  
  //scroll view to fit on smaller screen
  fileprivate let overviewScrollView: UIScrollView = {
    let view = UIScrollView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.isScrollEnabled = true
    view.showsVerticalScrollIndicator = false
    view.contentSize = CGSize(width: UIScreen.main.bounds.width, height: view.contentSize.height)
    
    return view
  }()
  
  fileprivate let blurView: UIVisualEffectView = {
    let view = UIVisualEffectView()
    view.translatesAutoresizingMaskIntoConstraints = false
    let effect = UIBlurEffect(style: UIBlurEffectStyle.light)
    view.effect = effect
    return view
  }()
  
  fileprivate let imageView: UIImageView = {
    let view = UIImageView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.contentMode = .scaleAspectFit
    return view
  }()
  
  fileprivate let backgroundImageView: UIImageView = {
    let view = UIImageView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.contentMode = .scaleAspectFill
    view.clipsToBounds = true
    return view
  }()
  
  //category label
  fileprivate let categoryLabel: DULabel = {
    let label = DULabel()
    label.translatesAutoresizingMaskIntoConstraints = false
    label.text = "Category"
    return label
  }()
  
  fileprivate let categoryScrollView: UIScrollView = {
    let view = UIScrollView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.isScrollEnabled = true
    view.showsHorizontalScrollIndicator = false
    return view
  }()
  
  //top, pants, footwear buttons
  fileprivate let topButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setTitleColor(.white, for: .normal)
    button.setTitle("Top", for: .normal)
    button.layer.cornerRadius = 17.5
    button.layer.backgroundColor = UIColor.lighterBlue.cgColor
    return button
  }()
  
  fileprivate let pantsButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setTitleColor(.white, for: .normal)
    button.setTitle("Pants", for: .normal)
    button.layer.cornerRadius = 17.5
    button.layer.backgroundColor = UIColor.lighterBlue.cgColor
    return button
  }()
  
  fileprivate let footwearButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setTitleColor(.white, for: .normal)
    button.setTitle("Footwear", for: .normal)
    button.layer.cornerRadius = 17.5
    button.layer.backgroundColor = UIColor.lighterBlue.cgColor
    return button
  }()
  
  fileprivate let occasionScrollView: UIScrollView = {
    let view = UIScrollView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.showsHorizontalScrollIndicator = false
    return view
  }()
  
  fileprivate let occasionLabel: DULabel = {
    let label = DULabel()
    label.translatesAutoresizingMaskIntoConstraints = false
    label.text = "Occasion"
    return label
  }()
  
  fileprivate let addOccasionsButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setImage(#imageLiteral(resourceName: "betterLookingAdd"), for: .normal)
    return button
  }()
  
  fileprivate let apparelScrollView: UIScrollView = {
    let view = UIScrollView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.showsHorizontalScrollIndicator = false
    
    return view
  }()
  
  fileprivate let apparelLabel: DULabel = {
    let label = DULabel()
    label.translatesAutoresizingMaskIntoConstraints = false
    label.numberOfLines = 0
    label.text = "Apparel"
    label.lineBreakMode = .byWordWrapping
    label.alpha = 0
    return label
  }()
  
  fileprivate let addApparelsButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setImage(#imageLiteral(resourceName: "betterLookingAdd"), for: .normal)
    
    return button
  }()
  
  fileprivate let colorScrollView: UIScrollView = {
    let view = UIScrollView()
    view.translatesAutoresizingMaskIntoConstraints = false
    view.showsHorizontalScrollIndicator = false
    
    return view
  }()
  
  fileprivate let colorLabel: DULabel = {
    let label = DULabel()
    label.translatesAutoresizingMaskIntoConstraints = false
    label.numberOfLines = 0
    label.text = "Color"
    label.lineBreakMode = .byWordWrapping
    label.alpha = 0
    return label
  }()
  
  fileprivate let addColorsButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setImage(#imageLiteral(resourceName: "betterLookingAdd"), for: .normal)
    return button
  }()
  
  
  fileprivate let saveButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    
    button.setTitle("Save", for: .normal)
    button.setTitleColor(.black, for: .normal)
    
    button.layer.cornerRadius = 25
    button.layer.borderWidth = 2
    button.layer.borderColor = UIColor.black.cgColor
    
    button.alpha = 0
    
    return button
  }()
  
  fileprivate let chooseImageButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setImage(#imageLiteral(resourceName: "chooseImageButton"), for: .normal)
    return button
  }()
  
  fileprivate let takePhotoImageButton: DUButton = {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setImage(#imageLiteral(resourceName: "takePhotoImageButton"), for: .normal)
    return button
  }()
  
  var saveButtonHeightConstraint: NSLayoutConstraint = NSLayoutConstraint()
  var app: ClarifaiApp?
  let picker = UIImagePickerController()
  
  var pendingImage: UIImage?
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    app = ClarifaiApp(apiKey: "eeace7a446b74adda719b9b8cd62b7a1")
    initialize()
    
    navigationItem.title = "Camera"
  
  }
  
  deinit {
    takePhotoImageButton.removeTarget(self, action: nil, for: .allEvents)
    chooseImageButton.removeTarget(self, action: nil, for: .allEvents)
    
    topButton.removeTarget(self, action: nil, for: .allEvents)
    pantsButton.removeTarget(self, action: nil, for: .allEvents)
    footwearButton.removeTarget(self, action: nil, for: .allEvents)
    
    addOccasionsButton.removeTarget(self, action: nil, for: .allEvents)
    addApparelsButton.removeTarget(self, action: nil, for: .allEvents)
    addColorsButton.removeTarget(self, action: nil, for: .allEvents)
    
    saveButton.removeTarget(self, action: nil, for: .allEvents)
  }
  
  private func initialize() {
    
    view.addSubview(overviewScrollView)
    
    overviewScrollView.addSubview(backgroundImageView)
    overviewScrollView.insertSubview(blurView, aboveSubview: backgroundImageView)
    overviewScrollView.insertSubview(imageView, aboveSubview: blurView)
    overviewScrollView.insertSubview(chooseImageButton, aboveSubview: imageView)
    overviewScrollView.insertSubview(takePhotoImageButton, aboveSubview: imageView)
    
    overviewScrollView.addSubview(categoryLabel)
    overviewScrollView.addSubview(categoryScrollView)
    categoryScrollView.addSubview(topButton)
    categoryScrollView.addSubview(pantsButton)
    categoryScrollView.addSubview(footwearButton)
    
    overviewScrollView.addSubview(occasionLabel)
    overviewScrollView.addSubview(occasionScrollView)
    occasionScrollView.addSubview(addOccasionsButton)
    
    overviewScrollView.addSubview(apparelLabel)
    overviewScrollView.addSubview(apparelScrollView)
    apparelScrollView.addSubview(addApparelsButton)
    
    overviewScrollView.addSubview(colorLabel)
    overviewScrollView.addSubview(colorScrollView)
    colorScrollView.addSubview(addColorsButton)
    
    overviewScrollView.addSubview(saveButton)
    
    backgroundImageView.layer.borderColor = UIColor.black.cgColor
    
    takePhotoImageButton.addTarget(self, action: #selector(CameraViewController.takePhotoImageButtonTapped), for: .touchUpInside)
    chooseImageButton.addTarget(self, action: #selector(CameraViewController.chooseImageButtonTapped), for: .touchUpInside)
    
    topButton.addTarget(self, action: #selector(CameraViewController.topButtonTapped), for: .touchDown)
    topButton.addTarget(self, action: #selector(CameraViewController.topButtonTapped), for: .touchDragExit)
    
    
    pantsButton.addTarget(self, action: #selector(CameraViewController.pantsButtonTapped), for: .touchDown)
    pantsButton.addTarget(self, action: #selector(CameraViewController.pantsButtonTapped), for: .touchDragExit)
    
    footwearButton.addTarget(self, action: #selector(CameraViewController.footwearButtonTapped), for: .touchDown)
    footwearButton.addTarget(self, action: #selector(CameraViewController.footwearButtonTapped), for: .touchDragExit)
    
    
    addOccasionsButton.addTarget(self, action: #selector(CameraViewController.addOccasionsButtonTapped), for: .touchDown)
    addOccasionsButton.addTarget(self, action: #selector(CameraViewController.addOccasionsButtonTapped), for: .touchDragExit)
    
    addApparelsButton.addTarget(self, action: #selector(CameraViewController.addApparelsButtonTapped), for: .touchDown)
    addApparelsButton.addTarget(self, action: #selector(CameraViewController.addApparelsButtonTapped), for: .touchDragExit)
    
    addColorsButton.addTarget(self, action: #selector(CameraViewController.addColorsButtonTapped), for: .touchDown)
    addColorsButton.addTarget(self, action: #selector(CameraViewController.addColorsButtonTapped), for: .touchDragExit)
    
    
    saveButton.addTarget(self, action: #selector(CameraViewController.saveButtonTapped), for: .touchUpInside)
    
    
    
    let screenWidth = UIScreen.main.bounds.size.width
    
    //scroll view
    view.addConstraint(NSLayoutConstraint(item: overviewScrollView, attribute: .top, relatedBy: .equal, toItem: view, attribute: .top, multiplier: 1.0, constant: 0))
    view.addConstraint(NSLayoutConstraint(item: overviewScrollView, attribute: .left, relatedBy: .equal, toItem: view, attribute: .left, multiplier: 1.0, constant: 0))
    view.addConstraint(NSLayoutConstraint(item: overviewScrollView, attribute: .right, relatedBy: .equal, toItem: view, attribute: .right, multiplier: 1.0, constant: 0))
    view.addConstraint(NSLayoutConstraint(item: overviewScrollView, attribute: .bottom, relatedBy: .equal, toItem: view, attribute: .bottom, multiplier: 1.0, constant: -50))
    
    //background imageview
    overviewScrollView.addConstraint(NSLayoutConstraint(item: backgroundImageView, attribute: .top, relatedBy: .equal, toItem: overviewScrollView, attribute: .top, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: backgroundImageView, attribute: .left, relatedBy: .equal, toItem: overviewScrollView, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: backgroundImageView, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: backgroundImageView, attribute: .height, relatedBy: .equal, toItem: backgroundImageView, attribute: .width, multiplier: 1.0, constant: 0))
    
    //blur view
    overviewScrollView.addConstraint(NSLayoutConstraint(item: blurView, attribute: .top, relatedBy: .equal, toItem: backgroundImageView, attribute: .top, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: blurView, attribute: .left, relatedBy: .equal, toItem: backgroundImageView, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: blurView, attribute: .right, relatedBy: .equal, toItem: backgroundImageView, attribute: .right, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: blurView, attribute: .bottom, relatedBy: .equal, toItem: backgroundImageView, attribute: .bottom, multiplier: 1.0, constant: 0))
    
    //image view
    overviewScrollView.addConstraint(NSLayoutConstraint(item: imageView, attribute: .top, relatedBy: .equal, toItem: backgroundImageView, attribute: .top, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: imageView, attribute: .left, relatedBy: .equal, toItem: backgroundImageView, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: imageView, attribute: .right, relatedBy: .equal, toItem: backgroundImageView, attribute: .right, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: imageView, attribute: .bottom, relatedBy: .equal, toItem: backgroundImageView, attribute: .bottom, multiplier: 1.0, constant: 0))
    
    //take photo image button on top of image
    overviewScrollView.addConstraint(NSLayoutConstraint(item: takePhotoImageButton, attribute: .top, relatedBy: .equal, toItem: backgroundImageView, attribute: .top, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: takePhotoImageButton, attribute: .left, relatedBy: .equal, toItem: backgroundImageView, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: takePhotoImageButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth/2))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: takePhotoImageButton, attribute: .bottom, relatedBy: .equal, toItem: backgroundImageView, attribute: .bottom, multiplier: 1.0, constant: 0))
    
    //choose image button on top of image
    overviewScrollView.addConstraint(NSLayoutConstraint(item: chooseImageButton, attribute: .top, relatedBy: .equal, toItem: backgroundImageView, attribute: .top, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: chooseImageButton, attribute: .left, relatedBy: .equal, toItem: takePhotoImageButton, attribute: .right, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: chooseImageButton, attribute: .right, relatedBy: .equal, toItem: backgroundImageView, attribute: .right, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: chooseImageButton, attribute: .bottom, relatedBy: .equal, toItem: backgroundImageView, attribute: .bottom, multiplier: 1.0, constant: 0))
    
    
    //category label
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryLabel, attribute: .top, relatedBy: .equal, toItem: imageView, attribute: .bottom, multiplier: 1.0, constant: 10))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryLabel, attribute: .left, relatedBy: .equal, toItem: overviewScrollView, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryLabel, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: categoryLabel.intrinsicContentSize.width + 20))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryLabel, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //category scroll view
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryScrollView, attribute: .left, relatedBy: .equal, toItem: categoryLabel, attribute: .right, multiplier: 1.0, constant: 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryScrollView, attribute: .top, relatedBy: .equal, toItem: categoryLabel, attribute: .top, multiplier: 1.0, constant: -5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryScrollView, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth - categoryLabel.intrinsicContentSize.width - 20 - 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: categoryScrollView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 50))
    
    //top button
    categoryScrollView.addConstraint(NSLayoutConstraint(item: topButton, attribute: .top, relatedBy: .equal, toItem: categoryScrollView, attribute: .top, multiplier: 1.0, constant: 5))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: topButton, attribute: .left, relatedBy: .equal, toItem: categoryScrollView, attribute: .left, multiplier: 1.0, constant: 10))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: topButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: topButton.intrinsicContentSize.width + 20))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: topButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //pants button
    categoryScrollView.addConstraint(NSLayoutConstraint(item: pantsButton, attribute: .top, relatedBy: .equal, toItem: topButton, attribute: .top, multiplier: 1.0, constant: 0))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: pantsButton, attribute: .left, relatedBy: .equal, toItem: topButton, attribute: .right, multiplier: 1.0, constant: 15))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: pantsButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: pantsButton.intrinsicContentSize.width + 20))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: pantsButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //footwear button
    categoryScrollView.addConstraint(NSLayoutConstraint(item: footwearButton, attribute: .top, relatedBy: .equal, toItem: pantsButton, attribute: .top, multiplier: 1.0, constant: 0))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: footwearButton, attribute: .left, relatedBy: .equal, toItem: pantsButton, attribute: .right, multiplier: 1.0, constant: 15))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: footwearButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: footwearButton.intrinsicContentSize.width + 20))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: footwearButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    categoryScrollView.addConstraint(NSLayoutConstraint(item: footwearButton, attribute: .right, relatedBy: .equal, toItem: categoryScrollView, attribute: .right, multiplier: 1.0, constant: 0))
    
    //occasion label
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionLabel, attribute: .top, relatedBy: .equal, toItem: categoryLabel, attribute: .bottom, multiplier: 1.0, constant: 10))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionLabel, attribute: .left, relatedBy: .equal, toItem: categoryLabel, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionLabel, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: categoryLabel.intrinsicContentSize.width + 20))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionLabel, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //occasion scroll view
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionScrollView, attribute: .left, relatedBy: .equal, toItem: occasionLabel, attribute: .right, multiplier: 1.0, constant: 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionScrollView, attribute: .top, relatedBy: .equal, toItem: occasionLabel, attribute: .top, multiplier: 1.0, constant: -5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionScrollView, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth - categoryLabel.intrinsicContentSize.width - 20 - 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: occasionScrollView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 50))
    
    //add occasion button
    occasionScrollView.addConstraint(NSLayoutConstraint(item: addOccasionsButton, attribute: .right, relatedBy: .equal, toItem: occasionScrollView, attribute: .right, multiplier: 1.0, constant: 0))
    occasionScrollView.addConstraint(NSLayoutConstraint(item: addOccasionsButton, attribute: .top, relatedBy: .equal, toItem: occasionScrollView, attribute: .top, multiplier: 1.0, constant: 5))
    occasionScrollView.addConstraint(NSLayoutConstraint(item: addOccasionsButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    occasionScrollView.addConstraint(NSLayoutConstraint(item: addOccasionsButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //set the constraints for the occasion buttons
    addConstraintsForOccasionButtons()
    
    //apparel label
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelLabel, attribute: .top, relatedBy: .equal, toItem: occasionLabel, attribute: .bottom, multiplier: 1.0, constant: 10))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelLabel, attribute: .left, relatedBy: .equal, toItem: occasionLabel, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelLabel, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: categoryLabel.intrinsicContentSize.width + 20))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelLabel, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //apparel scroll view
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelScrollView, attribute: .left, relatedBy: .equal, toItem: apparelLabel, attribute: .right, multiplier: 1.0, constant: 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelScrollView, attribute: .top, relatedBy: .equal, toItem: apparelLabel, attribute: .top, multiplier: 1.0, constant: -5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelScrollView, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth - categoryLabel.intrinsicContentSize.width - 20 - 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: apparelScrollView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 50))
    
    //add apparel button
    apparelScrollView.addConstraint(NSLayoutConstraint(item: addApparelsButton, attribute: .right, relatedBy: .equal, toItem: apparelScrollView, attribute: .right, multiplier: 1.0, constant: 0))
    apparelScrollView.addConstraint(NSLayoutConstraint(item: addApparelsButton, attribute: .top, relatedBy: .equal, toItem: apparelScrollView, attribute: .top, multiplier: 1.0, constant: 5))
    apparelScrollView.addConstraint(NSLayoutConstraint(item: addApparelsButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    apparelScrollView.addConstraint(NSLayoutConstraint(item: addApparelsButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //color label
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorLabel, attribute: .top, relatedBy: .equal, toItem: apparelLabel, attribute: .bottom, multiplier: 1.0, constant: 10))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorLabel, attribute: .left, relatedBy: .equal, toItem: apparelLabel, attribute: .left, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorLabel, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: categoryLabel.intrinsicContentSize.width + 20))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorLabel, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //color scroll view
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorScrollView, attribute: .left, relatedBy: .equal, toItem: colorLabel, attribute: .right, multiplier: 1.0, constant: 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorScrollView, attribute: .top, relatedBy: .equal, toItem: colorLabel, attribute: .top, multiplier: 1.0, constant: -5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorScrollView, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth - categoryLabel.intrinsicContentSize.width - 20 - 5))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: colorScrollView, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 50))
    
    //add color button
    colorScrollView.addConstraint(NSLayoutConstraint(item: addColorsButton, attribute: .right, relatedBy: .equal, toItem: colorScrollView, attribute: .right, multiplier: 1.0, constant: 0))
    
    colorScrollView.addConstraint(NSLayoutConstraint(item: addColorsButton, attribute: .top, relatedBy: .equal, toItem: colorScrollView, attribute: .top, multiplier: 1.0, constant: 5))
    colorScrollView.addConstraint(NSLayoutConstraint(item: addColorsButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    colorScrollView.addConstraint(NSLayoutConstraint(item: addColorsButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
    
    //save button
    overviewScrollView.addConstraint(NSLayoutConstraint(item: saveButton, attribute: .centerX, relatedBy: .equal, toItem: overviewScrollView, attribute: .centerX, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: saveButton, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: screenWidth - 20))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: saveButton, attribute: .bottom, relatedBy: .equal, toItem: overviewScrollView, attribute: .bottom, multiplier: 1.0, constant: 0))
    overviewScrollView.addConstraint(NSLayoutConstraint(item: saveButton, attribute: .top, relatedBy: .equal, toItem: colorLabel, attribute: .bottom, multiplier: 1.0, constant: 10))
    saveButtonHeightConstraint = NSLayoutConstraint(item: saveButton, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 50)
    overviewScrollView.addConstraint(saveButtonHeightConstraint)
  }
  
  func addConstraintsForOccasionButtons() {
    
    for button in occasionButtons {
      button.removeFromSuperview()
    }
    occasionButtons.removeAll()
    
    for occasion in occasionButtonText {
      
      let button = createOccasionbutton()
      button.setTitle(occasion, for: .normal)
      
      occasionButtons.append(button)
    }
    
    var previousOccasionButton: UIButton?
    
    for button in occasionButtons {
      
      button.addTarget(self, action: #selector(CameraViewController.occasionButtonCheckTouchDown(sender:)), for: [.touchDown,
                                                                                                                  .touchDragInside])
      
      button.addTarget(self, action: #selector(CameraViewController.occasionButtonCheckTouchUpInside(sender:)), for: .touchUpInside)
      
      button.addTarget(self, action: #selector(CameraViewController.occasionButtonCheckTouchUp(sender:)), for: [.touchUpOutside,
                                                                                                                .touchDragExit,
                                                                                                                .touchCancel,
                                                                                                                .touchDragOutside])
      
      if nil == previousOccasionButton {
        
        previousOccasionButton = button
      
        occasionScrollView.addSubview(button)
        
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: occasionScrollView, attribute: .top, multiplier: 1.0, constant: 5))
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .left, relatedBy: .equal, toItem: occasionScrollView, attribute: .left, multiplier: 1.0, constant: 10))
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: button.intrinsicContentSize.width + 20))
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
        
      } else {
        
        occasionScrollView.addSubview(button)

        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: previousOccasionButton, attribute: .top, multiplier: 1.0, constant: 0))
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .left, relatedBy: .equal, toItem: previousOccasionButton, attribute: .right, multiplier: 1.0, constant: 15))
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: button.intrinsicContentSize.width + 20))
        occasionScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .bottom, relatedBy: .equal, toItem: previousOccasionButton, attribute: .bottom , multiplier: 1.0, constant: 0))
      
        previousOccasionButton = button
        
      }
    }
    occasionScrollView.addConstraint(NSLayoutConstraint(item: previousOccasionButton!, attribute: .right, relatedBy: .equal, toItem: addOccasionsButton, attribute: .left, multiplier: 1.0, constant: -10))
    
    //animations
    var occasionDelay = 0.3

    for button in occasionButtons {
      UIView.animate(withDuration: 0.3, delay: TimeInterval(occasionDelay), options: .curveEaseOut, animations: {
        button.alpha = 1
        occasionDelay += 0.3
      }
        , completion: nil)
    }
  }
  
  func addConstraintsForApparelButtons() {
    
    for button in apparelButtons {
      
      button.removeFromSuperview()
    }
    
    apparelButtons.removeAll()
    
    for apparel in self.autoGeneratedApparelTags {
      let button = self.createButton()
      button.setTitle(apparel, for: .normal)
      
      apparelButtons.append(button)
    }
    
    var previousButton: UIButton?
    
    for button in apparelButtons {
      
      button.addTarget(self, action: #selector(CameraViewController.apparelButtonCheckTouchDown(sender:)), for: [.touchDown,
                                                                                                                 .touchDragInside])
      
      button.addTarget(self, action: #selector(CameraViewController.apparelButtonCheckTouchUpInside(sender:)), for: .touchUpInside)
      
      button.addTarget(self, action: #selector(CameraViewController.apparelButtonCheckTouchUp(sender:)), for: [.touchUpOutside,
                                                                                                               .touchDragExit,
                                                                                                               .touchCancel,
                                                                                                               .touchDragOutside])
      if nil == previousButton {
        
        previousButton = button
        
        apparelScrollView.addSubview(button)

        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: apparelScrollView, attribute: .top, multiplier: 1.0, constant: 5))
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .left, relatedBy: .equal, toItem: apparelScrollView, attribute: .left, multiplier: 1.0, constant: 10))
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: button.intrinsicContentSize.width + 20))
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
        
        
      } else {
        
        apparelScrollView.addSubview(button)
          
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: previousButton, attribute: .top, multiplier: 1.0, constant: 0))
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .left, relatedBy: .equal, toItem: previousButton, attribute: .right, multiplier: 1.0, constant: 15))
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: button.intrinsicContentSize.width + 20))
        apparelScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .bottom, relatedBy: .equal, toItem: previousButton, attribute: .bottom , multiplier: 1.0, constant: 0))
        

        
        previousButton = button
      }
    }
    
    apparelScrollView.addConstraint(NSLayoutConstraint(item: previousButton!, attribute: .right, relatedBy: .equal, toItem: addApparelsButton, attribute: .left, multiplier: 1.0, constant: -10))
    
    //animations
    var apparelDelay = 0.3
    for button in apparelButtons {
      UIView.animate(withDuration: 0.3, delay: TimeInterval(apparelDelay), options: .curveEaseOut, animations: {
        button.alpha = 1
        apparelDelay += 0.3
      }
        , completion: nil)
    }
  }
  
  func addConstraintsForColorButtons() {
    for button in colorButtons {
      button.removeFromSuperview()
    }
    
    colorButtons.removeAll()
    
    for color in autoGeneratedColorTags {
      let button = createButton()
      button.setTitle(color, for: .normal)
      
      colorButtons.append(button)
    }
    var previousButton: UIButton?
    
    for button in colorButtons {
      
      button.addTarget(self, action: #selector(CameraViewController.colorButtonCheckTouchDown(sender:)), for: [.touchDown,
                                                                                                               .touchDragInside])
      
      button.addTarget(self, action: #selector(CameraViewController.colorButtonCheckTouchUpInside(sender:)), for: .touchUpInside)
      
      button.addTarget(self, action: #selector(CameraViewController.colorButtonCheckTouchUp(sender:)), for: [.touchUpOutside,
                                                                                                             .touchDragExit,
                                                                                                             .touchCancel,
                                                                                                             .touchDragOutside])
      if nil == previousButton {
        previousButton = button
        colorScrollView.addSubview(button)
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: colorScrollView, attribute: .top, multiplier: 1.0, constant: 5))
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .left, relatedBy: .equal, toItem: colorScrollView, attribute: .left, multiplier: 1.0, constant: 10))
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: button.intrinsicContentSize.width + 20))
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: 35))
        
      } else {
        colorScrollView.addSubview(button)
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .top, relatedBy: .equal, toItem: previousButton, attribute: .top, multiplier: 1.0, constant: 0))
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .left, relatedBy: .equal, toItem: previousButton, attribute: .right, multiplier: 1.0, constant: 15))
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .width, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1.0, constant: button.intrinsicContentSize.width + 20))
        colorScrollView.addConstraint(NSLayoutConstraint(item: button, attribute: .bottom, relatedBy: .equal, toItem: previousButton, attribute: .bottom , multiplier: 1.0, constant: 0))
        
        previousButton = button
      }
    }
    colorScrollView.addConstraint(NSLayoutConstraint(item: previousButton!, attribute: .right, relatedBy: .equal, toItem: addColorsButton, attribute: .left, multiplier: 1.0, constant: -10))
    
    //animations
    var colorDelay = 0.3
    for button in colorButtons {
      UIView.animate(withDuration: 0.3, delay: TimeInterval(colorDelay), options: .curveEaseOut, animations: {
        button.alpha = 1
        colorDelay += 0.3
      }
        , completion: nil)
    }
  }
  
  
  
  private dynamic func takePhotoImageButtonTapped() {
    
    checkCameraPermissions()
  }
  
  private dynamic func chooseImageButtonTapped() {
    checkPhotoLibraryPermissions()
  }
  
  private dynamic func topButtonTapped() {
    categoryButtonIndex = 0
    topButton.layer.backgroundColor = UIColor.royalBlue.cgColor
    pantsButton.layer.backgroundColor = UIColor.lighterBlue.cgColor
    footwearButton.layer.backgroundColor = UIColor.lighterBlue.cgColor
    
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.topButton.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
    },
      completion: nil)
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.pantsButton.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.footwearButton.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
    
  }
  
  private dynamic func pantsButtonTapped() {
    categoryButtonIndex = 1
    pantsButton.layer.backgroundColor = UIColor.royalBlue.cgColor
    topButton.layer.backgroundColor = UIColor.lighterBlue.cgColor
    footwearButton.layer.backgroundColor = UIColor.lighterBlue.cgColor
    
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.pantsButton.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
    },
      completion: nil)
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.topButton.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.footwearButton.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
  }
  
  private dynamic func footwearButtonTapped() {
    categoryButtonIndex = 2
    footwearButton.layer.backgroundColor = UIColor.royalBlue.cgColor
    topButton.layer.backgroundColor = UIColor.lighterBlue.cgColor
    pantsButton.layer.backgroundColor = UIColor.lighterBlue.cgColor
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.footwearButton.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
    },
      completion: nil)
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.pantsButton.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        self.topButton.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
  }
  
  //occasion buttons
  private dynamic func occasionButtonCheckTouchDown(sender: UIButton) {
    sender.backgroundColor = UIColor.royalBlue
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        sender.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
    },
      completion: nil)
    
  }
  
  private dynamic func occasionButtonCheckTouchUpInside(sender: UIButton) {
    if sender.isSelected {
      sender.backgroundColor = UIColor.lighterBlue
      UIView.animate(
        withDuration: 0.3,
        delay: 0.0,
        options: .curveEaseOut,
        animations: {
          sender.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
      },
        completion: nil)
      sender.isSelected = false
    } else {
      sender.backgroundColor = UIColor.royalBlue
      UIView.animate(
        withDuration: 0.3,
        delay: 0.0,
        options: .curveEaseOut,
        animations: {
          sender.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
      },
        completion: nil)
      sender.isSelected = true
    }
  }
  
  private dynamic func occasionButtonCheckTouchUp(sender: UIButton) {
    sender.backgroundColor = UIColor.lighterBlue
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        sender.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
  }
  
  //apparel buttons
  private dynamic func apparelButtonCheckTouchDown(sender: UIButton) {
    sender.backgroundColor = UIColor.royalBlue
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        sender.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
    },
      completion: nil)
  }
  
  private dynamic func apparelButtonCheckTouchUpInside(sender: UIButton) {
    if sender.isSelected {
      sender.backgroundColor = UIColor.lighterBlue
      UIView.animate(
        withDuration: 0.3,
        delay: 0.0,
        options: .curveEaseOut,
        animations: {
          sender.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
      },
        completion: nil)
      sender.isSelected = false
    } else {
      sender.backgroundColor = UIColor.royalBlue
      UIView.animate(
        withDuration: 0.3,
        delay: 0.0,
        options: .curveEaseOut,
        animations: {
          sender.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
      },
        completion: nil)
      sender.isSelected = true
    }
  }
  
  private dynamic func apparelButtonCheckTouchUp(sender: UIButton) {
    sender.backgroundColor = UIColor.lighterBlue
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        sender.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
  }
  
  //color buttons
  private dynamic func colorButtonCheckTouchDown(sender: UIButton) {
    sender.backgroundColor = UIColor.royalBlue
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        sender.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
    },
      completion: nil)
  }
  
  private dynamic func colorButtonCheckTouchUpInside(sender: UIButton) {
    if sender.isSelected {
      sender.backgroundColor = UIColor.lighterBlue
      UIView.animate(
        withDuration: 0.3,
        delay: 0.0,
        options: .curveEaseOut,
        animations: {
          sender.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
      },
        completion: nil)
      sender.isSelected = false
    } else {
      sender.backgroundColor = UIColor.royalBlue
      UIView.animate(
        withDuration: 0.3,
        delay: 0.0,
        options: .curveEaseOut,
        animations: {
          sender.layer.transform = CATransform3DMakeScale(1.1, 1.1, 1.0)
      },
        completion: nil)
      sender.isSelected = true
    }
  }
  
  private dynamic func colorButtonCheckTouchUp(sender: UIButton) {
    sender.backgroundColor = UIColor.lighterBlue
    UIView.animate(
      withDuration: 0.3,
      delay: 0.0,
      options: .curveEaseOut,
      animations: {
        sender.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
    },
      completion: nil)
  }
  
  private dynamic func addOccasionsButtonTapped() {
    
    let appearance = SCLAlertView.SCLAppearance(
      
      kCircleIconHeight: 30,
      
      kTitleFont: UIFont(name: "GothamRounded-Light", size: 20)!,
      kTextFont: UIFont(name: "GothamRounded-Light", size: 14)!,
      kButtonFont: UIFont(name: "GothamRounded-Light", size: 14)!,
      
      showCloseButton: false,
      
      hideWhenBackgroundViewIsTapped: true
    )
    
    let alertView = SCLAlertView(appearance: appearance)
    let occasionTextField = alertView.addTextField("Your occasion")
    occasionTextField.delegate = self

    alertView.addButton("Confirm") {
      
      if occasionTextField.text != "" {
        self.occasionButtonText.append(occasionTextField.text!)
        
        self.addConstraintsForOccasionButtons()
      }
    }
    
    let alertViewIcon = UIImage(named: "occasion_popup")
    _ = alertView.showCustom("Add Occasion", subTitle: "Want to wear this at another occasion? Customize your own!", color: UIColor.royalBlue, icon: alertViewIcon!)
  }
  
  private dynamic func addApparelsButtonTapped() {
    
    let appearance = SCLAlertView.SCLAppearance(
      
      kCircleIconHeight: 30,
      
      kTitleFont: UIFont(name: "GothamRounded-Light", size: 20)!,
      kTextFont: UIFont(name: "GothamRounded-Light", size: 14)!,
      kButtonFont: UIFont(name: "GothamRounded-Light", size: 14)!,
      
      showCloseButton: false,
      
      hideWhenBackgroundViewIsTapped: true
    )
    
    let alertView = SCLAlertView(appearance: appearance)
    let apparelTextField = alertView.addTextField("Your apparel")
    apparelTextField.delegate = self

    alertView.addButton("Confirm") {
      
      if apparelTextField.text != "" {
        self.autoGeneratedApparelTags.append(apparelTextField.text!)
        self.addConstraintsForApparelButtons()
      
      }
    }
    
    let alertViewIcon = UIImage(named: "clothes_white")
    _ = alertView.showCustom("Add Apparel", subTitle: "None of the generated apparels match the photo? Insert your own!", color: UIColor.royalBlue, icon: alertViewIcon!)
  }
  
  private dynamic func addColorsButtonTapped() {
    
    let appearance = SCLAlertView.SCLAppearance(
      
      kCircleIconHeight: 30,
      
      kTitleFont: UIFont(name: "GothamRounded-Light", size: 20)!,
      kTextFont: UIFont(name: "GothamRounded-Light", size: 14)!,
      kButtonFont: UIFont(name: "GothamRounded-Light", size: 14)!,
      
      showCloseButton: false,
      
      hideWhenBackgroundViewIsTapped: true
    )
    
    let alertView = SCLAlertView(appearance: appearance)
    let colorTextField = alertView.addTextField("Your color")
    colorTextField.delegate = self;

    alertView.addButton("Confirm") {
      
      if colorTextField.text != "" {
        self.autoGeneratedColorTags.append(colorTextField.text!)
        self.addConstraintsForColorButtons()
        
      }
    }
    
    let alertViewIcon = UIImage(named: "color_popup")
    _ = alertView.showCustom("Add Color", subTitle: "Missing some colors? Add them here!", color: UIColor.royalBlue, icon: alertViewIcon!)
  }
  
  private dynamic func saveButtonTapped() {
    
    var positionTags = ""
    if categoryButtonIndex == 0 {
      positionTags = "Top"
      
    }
    else if categoryButtonIndex == 1 {
      positionTags = "Pants"
      
    }
    else if categoryButtonIndex == 2 {
      positionTags = "Footwear"
      
    }
    for button in occasionButtons {
      if button.backgroundColor == UIColor.royalBlue {
        occasionTags.append((button.titleLabel?.text)!)
        button.backgroundColor = UIColor.lighterBlue
        UIView.animate(
          withDuration: 0.3,
          delay: 0.0,
          options: .curveEaseOut,
          animations: {
            button.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
        },
          completion: nil)
        
      }
    }
    
    for button in apparelButtons {
      if button.backgroundColor == UIColor.royalBlue {
        apparelTags.append((button.titleLabel?.text)!)
        button.backgroundColor = UIColor.lighterBlue
        UIView.animate(
          withDuration: 0.3,
          delay: 0.0,
          options: .curveEaseOut,
          animations: {
            button.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
        },
          completion: nil)
      }
    }
    
    for button in colorButtons {
      if button.backgroundColor == UIColor.royalBlue {
        colorTags.append((button.titleLabel?.text)!)
        button.backgroundColor = UIColor.lighterBlue
        UIView.animate(
          withDuration: 0.3,
          delay: 0.0,
          options: .curveEaseOut,
          animations: {
            button.layer.transform = CATransform3DMakeScale(1.0, 1.0, 1.0)
        },
          completion: nil)
      }
    }
    
    if occasionTags.isEmpty == true {
      occasionTags.append("Any")
    }
    if colorTags.isEmpty == true {
      colorTags.append("Any")
    }
    if apparelTags.isEmpty == true {
      apparelTags.append("Any")
    }
    
    takePhotoImageButton.setImage(#imageLiteral(resourceName: "takePhotoImageButton"), for: .normal)
    chooseImageButton.setImage(#imageLiteral(resourceName: "chooseImageButton"), for: .normal)
    imageView.image = nil
    backgroundImageView.image = nil
    if let image = pendingImage {
      PhotoService.create(for: image, imageApparel: apparelTags, imageColor: colorTags, imageOccasion: occasionTags, imagePosition: positionTags)
      //saveButtonHeightConstraint.constant = 0
      UIView.animate(
        withDuration: 0.4,
        delay: 0,
        options: .curveEaseOut,
        animations: { [weak self] _ in
          self?.saveButton.alpha = 0
          self?.view.layoutIfNeeded()
        }
      )
    }
    
  }
  
  fileprivate func displaySaveButton() {
    
    UIView.animate(
      withDuration: 0.4,
      delay: 0,
      options: .curveEaseOut,
      animations: { [weak self] _ in
        self?.saveButton.alpha = 1
        self?.view.layoutIfNeeded()
      }
    )
    
    takePhotoImageButton.setImage(nil, for: .normal)
    chooseImageButton.setImage(nil, for: .normal)
    
  }
  
  func createButton() -> DUButton {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.layer.cornerRadius = 17.5
    button.setTitleColor(.white, for: .normal)
    button.layer.backgroundColor = UIColor.lighterBlue.cgColor
    button.alpha = 0
    return button
  }
  
  func createOccasionbutton() -> DUButton {
    let button = DUButton()
    button.translatesAutoresizingMaskIntoConstraints = false
    button.setTitleColor(.white, for: .normal)
    button.layer.cornerRadius = 17.5
    button.layer.backgroundColor = UIColor.lighterBlue.cgColor
    button.alpha = 0
    return button
    
  }
  //check if camera access is permitted
  func checkCameraPermissions() {
    let authStatus = AVCaptureDevice.authorizationStatus(forMediaType: AVMediaTypeVideo)
    
    switch authStatus {
    case .authorized:
      setupCamera()
    case .denied:
      alertPromptToAllowCameraAccessViaSetting()
    default:
      setupCamera()
    }
  }
  
  func alertPromptToAllowCameraAccessViaSetting() {
    let alert = UIAlertController(title: "Error", message: "Camera access required to take photo", preferredStyle: UIAlertControllerStyle.alert)
    
    alert.addAction(UIAlertAction(title: "Cancel", style: .default))
    alert.addAction(UIAlertAction(title: "Settings", style: .cancel) { (alert) -> Void in
      
      UIApplication.shared.open(URL(string: UIApplicationOpenSettingsURLString)!, options: [:], completionHandler: nil)
      
    })
    
    present(alert, animated: true)
  }
  func setupCamera() {
    picker.allowsEditing = false
    picker.sourceType = UIImagePickerControllerSourceType.camera
    picker.delegate = self
    present(picker, animated: true, completion: nil)
  }
  
  func checkPhotoLibraryPermissions() {
    let authStatus = PHPhotoLibrary.authorizationStatus()
    switch authStatus {
    case .authorized:
      setupPhotoLibrary()
    case .denied:
      alertPromptToAllowPhotoLibraryAccessViaSetting()
    default:
      setupPhotoLibrary()
    }
  }
  
  func alertPromptToAllowPhotoLibraryAccessViaSetting() {
    let alert = UIAlertController(title: "Error", message: "Photo Library access required to choose from library", preferredStyle: UIAlertControllerStyle.alert)
    
    alert.addAction(UIAlertAction(title: "Cancel", style: .default))
    alert.addAction(UIAlertAction(title: "Settings", style: .cancel) { (alert) -> Void in
      UIApplication.shared.open(URL(string: UIApplicationOpenSettingsURLString)!, options: [:], completionHandler: nil)
    })
    
    present(alert, animated: true)
  }
  
  func setupPhotoLibrary() {
    picker.allowsEditing = false
    picker.sourceType = UIImagePickerControllerSourceType.photoLibrary

    picker.delegate = self
    present(picker, animated: true, completion: nil)
    
  }
  
  func textFieldShouldReturn(textField: UITextField!) -> Bool {
    return true;
  }
  
}

extension CameraViewController: UIImagePickerControllerDelegate {
  
  func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
    dismiss(animated: true, completion: nil)
    
    if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
      
      imageView.image = image
      backgroundImageView.image = image
      apparelLabel.alpha = 1
      colorLabel.alpha = 1
      
      recognizeImage(image: image, modelID: Constants.ModelIDs.categoryID, modelName: Constants.ModelNames.categoryName)
      recognizeImage(image: image, modelID: Constants.ModelIDs.colorID, modelName: Constants.ModelNames.colorName)
      
      saveButton.isEnabled = false
      occasionTags.removeAll()
      apparelTags.removeAll()
      colorTags.removeAll()
      
      pendingImage = image
      
      chooseImageButton.alpha = 0
      takePhotoImageButton.alpha = 0
      
    }
  }
  
  
  
  func recognizeImage(image: UIImage, modelID: String, modelName: String) {
    
    if app != nil {
      app?.getModelByID(modelID, completion: { (model, error) in
        let caiImage = ClarifaiImage(image: image)!
        
        model?.predict(on: [caiImage], completion: { (outputs, error) in
          guard let caiOutputs = outputs
            else { return }
          if let caiOutput = caiOutputs.first {
            DispatchQueue.main.async {
              
              if modelName == Constants.ModelNames.categoryName {
                self.autoGeneratedApparelTags.removeAll()
                
                for concept in caiOutput.concepts {
                  if self.autoGeneratedApparelTags.count < 5 {
                    
                    self.autoGeneratedApparelTags.append(concept.conceptName)
                  }
                }
                self.addConstraintsForApparelButtons()
              
              }
              
              if modelName == Constants.ModelNames.colorName {
                self.autoGeneratedColorTags.removeAll()
                
                for concept in caiOutput.colors {
                  if self.autoGeneratedColorTags.count < 5 {
                    self.autoGeneratedColorTags.append(concept.conceptName)
                  }
                }
                self.addConstraintsForColorButtons()
              
              }
            }
          }
          
          DispatchQueue.main.async {
            
            self.saveButton.isEnabled = true
            self.chooseImageButton.alpha = 1
            self.takePhotoImageButton.alpha = 1
            self.displaySaveButton()
            
          }
        })
      })
    }
  }
  
}

extension CameraViewController: UINavigationControllerDelegate {
  
}

extension CameraViewController: UITextFieldDelegate {
  
  func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    textField.resignFirstResponder()
    return true
  }
}

